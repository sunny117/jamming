{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","expiresIn","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","url","window","location","href","match","Number","setTimeout","history","pushState","Search","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","playlistName","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","savedTrack","push","filter","item","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.889df456.chunk.js","sourcesContent":["const CLIENT_ID = '165167bfcf5942508af17ba9f47dfbe8';\nconst REDIRECT_URI = 'http://localhost:3000/';\nlet accessToken;\nlet expiresIn;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        const url = window.location.href;\n        accessToken = url.match(/access_token=([^&]*)/);\n        expiresIn = url.match(/expires_in=([^&]*)/);\n        if (accessToken && expiresIn) {\n            accessToken = accessToken[1];\n            expiresIn = Number(expiresIn[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n        } else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\n        }\n    },\n\n    Search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: { Authorization: `Bearer ${accessToken}` }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (jsonResponse.tracks) {\n                return jsonResponse.tracks.items.map(track => {\n                    return {\n                        name: track.name,\n                        artist: track.artists[0].name,\n                        album: track.album.name,\n                        id: track.id,\n                        uri: track.uri\n                    }\n                });\n            }\n            return [];\n        });\n    },\n\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: playlistName })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackURIs })\n                });\n            });\n        });\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            term: ''\n        }\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    search(){\n        this.props.onSearch(this.state.term);\n    }\n    handleTermChange(event){\n        this.setState({\n            term: event.target.value\n        })\n    }\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\"\n                       onChange={this.handleTermChange} />\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    renderAction(isRemoval) {\n        if(isRemoval){\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n        \n    }\n    addTrack(){\n        this.props.onAdd(this.props.track);\n    }\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n    }\n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3> {this.props.track.name} </h3>\n                    <p> {this.props.track.artist} |  {this.props.track.album} </p>\n                </div>\n                {this.renderAction(this.props.isRemoval)}\n            </div>\n        )\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => {\n                    return <Track track={track} \n                                  key={track.id} \n                                  onAdd={this.props.onAdd} \n                                  onRemove={this.props.onRemove} \n                                  isRemoval={this.props.isRemoval}/>\n                })}   \n            </div>\n        );\n    }\n}\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    handleNameChange(event){\n        this.props.onNameChange(event.target.value);\n    }\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n                <TrackList tracks={this.props.playlistTracks} \n                           onRemove={this.props.onRemove} \n                           isRemoval={true}/>\n                <button className=\"Playlist-save\"\n                        onClick={this.props.onSave}>\n                        SAVE TO SPOTIFY\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  addTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n  removeTrack(track) {\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      const tracks = this.state.playlistTracks.filter(item => item !== track)\n      this.setState({\n        playlistTracks: tracks\n      })\n    }\n  }\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName,trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    });\n  }\n  search(term) {\n    Spotify.Search(term).then(searchResults => {\n      this.setState({searchResults: searchResults})\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}